   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15	---> Sigma     TT = QxSigma

   Q   /* L   D   +   -   (   )   ,   ;   :   =  fdt esp otr  *   /  /n */

   0   {{ 1,  3,  5,  6,  7,  8,  9, 10, 11, 16, 22,  0, 15, 13  14,  0},
   1    { 1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2}, /* Reconociendo identificador */
   2+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* Identificador reconocido */
   3    {17,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4}, /* Reconociendo constante */
   4+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* Constante reconocida */
   5+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* "+" reconocido */
   6+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* "-" reconocido */
   7+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* "(" reconocido */
   8+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* ")" reconocido */
   9+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* ", " reconocido */
  10+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* ";" reconocido */
   11   {16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 16}, /* Reconociendo ":=" */
  12+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* ":" reconocida */
  13+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* "*" reconocido */
   14   {19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19}, /* Reconociendo "/" */
   15   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* ERRORLEXICO */
   16   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* ERRORASIG */
   17   {17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18}, /* Reconociendo ERRORCTE */
   18   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* ERORCTE */
  19+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* "/" reconocido */
   20   {20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 20, 20, 20, 20, 21}, /* Reconociendo Comentario */
  21+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}, /* Comentario Completo */
  22+   {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}}; /* FDT reconocido */
  
  
#include "scanner.h"
#include <ctype.h>

FILE*f;

int Sigma(char c) //devuelve la columna de la TT
{
    if (isalpha(c)) return 0;
    if (isdigit(c)) return 1;
    if ( c == '+' ) return 2;
    if ( c == '-' ) return 3;
    if ( c == '(' ) return 4;
    if ( c == ')' ) return 5;
    if ( c == ',' ) return 6;
    if ( c == ';' ) return 7;
    if ( c == ':' ) return 8;
    if ( c == '=' ) return 9;
    if ( c == EOF ) return 10;
    if ( c == ''  ) return 11;
    if ( !(isalpha(c)) && !isdigit(c)) && (c != '+') && (c != '-') && (c != '(') && (c != ')') && (c != ',') && (c != ';') && (c != ':') && (c != EOF) && (c != '') && (c != '*') && (c != '/') && (c != '\n') return 12; // es otro caracter
    if ( c == '*' ) return 13;
    if ( c == '/' ) return 14;
    if ( c == '\n') return 15;
}

int estadoFinal(int Q)
{
if ( Q == 0 || Q == 1 || Q == 3 || Q == 11 || Q == 14 || Q == 15|| Q == 16 || Q == 17 || Q == 18 || Q == 20 ) return 0;
else return 1;
}

token Scanner()
{
    int numlinea = 0, Q = 0, sigma, i = 0;
    char c, buffer[99];

    int TT[][16]=
       {{ 1,  3,  5,  6,  7,  8,  9, 10 , 11, 16, 22, 0, 15, 13, 14,  0},
        { 1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {17,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4},
	      {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 16},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 20, 20, 20, 20, 21},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
        {55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55}};

    while (!estadoFinal(Q)&& !((Q == 15) || (Q == 16) || (Q == 18))
           {
                c = fgetc(f);
                sigma = Sigma(c);
                Q = tabla[Q][sigma];
                if ( sigma != 11 )
                    {
                        buffer[i] = c;
                        i++;
                    }
           }
        buffer[i]='\0'; //se inicializa el buffer
        switch (Q)
        {
            case 2 : if ( sigma != 11 )
            {
                ungetc(c, f);
                buffer[i-1] = '\0';
                numlinea--;
            }
            return ID;
            case 4 : if ( sigma != 11 )
            {
                ungetc(c, f);
                buffer[i-1] = '\0';
                numlinea--;
            }
            return CONSTANTE;
            case 5 : return SUMA;
            case 6 : return RESTA;
            case 7 : return PARENIZQUIERDO;
            case 8 : return PARENDERECHO;
            case 9 : return COMA;
            case 10 : return PUNTOYCOMA;
            case 12 : return ASIGNACION;
            case 13 : return FDT;
            case 14 : return ERRORLEXICO;
            // faltan *, /, los otros errores y no sé si alguno más
        }


}
